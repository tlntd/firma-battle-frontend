{"version":3,"sources":["Header.tsx","config.ts","common/Spinner.tsx","questions/QuestionScoresPanel.tsx","questions/QuestionsPanel.tsx","faq/FaqPanel.tsx","home/PlayingModal.tsx","home/HomePanel.tsx","companies/CompanyScoresPanel.tsx","companies/CompaniesPanel.tsx","App.tsx","index.tsx"],"names":["Header","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","className","Link","defaultOptions","size","color1","color2","color3","color4","HomePanel","options","additionalClasses","classNames","QuestionScoresPanel","question","scores","pluralText","striped","hover","map","score","i","key","companyId","name","wins","renderScores","QuestionsPanel","axios","get","config","response","this","props","updateState","questions","data","console","error","hash","parseInt","split","getQuestion","patchedQuestions","defineContent","getQuestionsId","variant","renderQuestions","Item","action","find","Component","FaqPanel","PlayingModal","state","getEmptyState","handleClose","bind","loadQuestion","voteForCompany","undefined","companies","results","voteLoading","onClose","setState","showing","centered","show","onEntered","onHide","aria-labelledby","Body","company1","company2","renderBody","text","renderCompany","company","Img","src","logo","renderButton","styles","StyleSheet","create","up","animationName","fadeOutUp","animationDuration","down","fadeOutDown","winner","css","winnerDelta","loserDelta","onClick","companiesResponse","questionResponse","winnerId","Boolean","a","loserId","c","questionId","post","setTimeout","e","useState","playing","setPlaying","fluid","CompanyScoresPanel","length","opponentId","opponentName","questionText","delta","renderDelta","renderArrow","CompaniesPanel","getCompanyId","getCompany","fetchQuestions","fetchScores","renderCompanies","patchedCompanies","App","document","location","window","addEventListener","includes","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4b2a42a4.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst Header: React.FC = () => {\n  return (\n    <Navbar bg=\"light\" expand=\"md\">\n      <Container>\n        <Navbar.Brand href=\"/#\">Firma-battle</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"navbar\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/#kysymykset\">Kysymykset</Nav.Link>\n            <Nav.Link href=\"/#yritykset\">Yritykset</Nav.Link>\n            <Nav.Link href=\"/#faq\">FAQ</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","export default {\n  api_endpoint: 'https://firma-battle-api.herokuapp.com',\n  image_endpoint: 'https://firma-battle-api.herokuapp.com'\n};\n","import React from 'react';\nimport MDSpinner from 'react-md-spinner';\nimport './Spinner.scss';\n\ntype Options = {\n  size: number,\n  color1: string,\n  color2: string,\n  color3: string,\n  color4: string\n}\n\ntype SpinnerProps = {\n  options?: Options,\n  additionalClasses?: string\n};\n\nconst defaultOptions = {\n  size: 32,\n  color1: '#07f9a5',\n  color2: '#f488ff',\n  color3: '#07f9a5',\n  color4: '#ffd231'\n};\n\nconst HomePanel: React.FC<SpinnerProps> = ({options, additionalClasses}) => {\n  let classNames: string = 'Spinner';\n\n  if (additionalClasses) {\n    classNames += ' ' + additionalClasses;\n  }\n\n  return (\n    <div className={classNames}>\n      <MDSpinner {...{...defaultOptions, options}} />\n    </div>\n  )\n};\n\nexport default HomePanel;\n","import React, {Fragment} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport {Question} from '../App';\nimport Spinner from '../common/Spinner';\nimport './QuestionScoresPanel.scss';\n\ntype QuestionScoresPanelProps = {\n  question: Question | undefined\n}\n\nconst QuestionScoresPanel: React.FC<QuestionScoresPanelProps> = ({question}) => {\n    if (!question || !question.scores) {\n      return <Spinner />;\n    }\n\n    return (\n      <Fragment>\n        <h2 className=\"Scores-title\">{question.pluralText}</h2>\n        <Table striped hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Pisteet</th>\n              <th>Nimi</th>\n              <th>Voitot</th>\n              <th>Tappiot</th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderScores(question)}\n          </tbody>\n        </Table>\n      </Fragment>\n    );\n\n  function renderScores(question: Question) {\n    return question.scores.map((score, i) => {\n      return (\n        <tr key={score.id}>\n          <td>{i+1}.</td>\n          <td>{score.score}</td>\n          <td><a href={`#yritykset-${score.companyId}`}>{score.name}</a></td>\n          <td>{score.wins}</td>\n          <td>{score.scores - score.wins}</td>\n        </tr>\n      )\n    })\n  }\n};\n\nexport default QuestionScoresPanel;\n","import React, {Component} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport axios from 'axios';\nimport {UpdateQuestionsState, Question} from '../App';\nimport config from '../config';\nimport QuestionScoresPanel from './QuestionScoresPanel';\n\ntype QuestionsPanelProps = {\n  hash: string,\n  updateState: (state: UpdateQuestionsState) => void,\n  questions: Question[]\n}\n\ntype QuestionsPanelState = {\n}\n\nexport default class QuestionsPanel extends Component<QuestionsPanelProps, QuestionsPanelState> {\n  async componentDidMount(): Promise<void> {\n    try {\n      const response = await axios.get(`${config.api_endpoint}/questions`);\n      this.props.updateState({questions: response.data});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async componentDidUpdate(): Promise<void> {\n    const {hash, questions, updateState} = this.props;\n    const id: number = parseInt(hash.split('-')[1], 10);\n\n    if (id) {\n      const question = this.getQuestion();\n      if (question && !question.scores) {\n        try {\n          const response = await axios.get(`${config.api_endpoint}/questions/${id}/scores`);\n          const patchedQuestions = questions.map((question) => {\n            if (question.id === id) {\n              question.scores = response.data;\n            }\n            return question;\n          });\n          updateState({questions: patchedQuestions});\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {this.defineContent()}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  defineContent() {\n    const id = this.getQuestionsId();\n\n    if (id) {\n      return <QuestionScoresPanel question={this.getQuestion()} />;\n    }\n\n    return (\n      <ListGroup variant=\"flush\">\n        {this.renderQuestions()}\n      </ListGroup>\n    );\n  }\n\n  renderQuestions() {\n    return this.props.questions.map((question) => {\n      return (\n        <ListGroup.Item key={question.id} action href={`#kysymykset-${question.id}`}>\n          {question.pluralText}\n        </ListGroup.Item>\n      );\n    });\n  }\n\n  getQuestionsId(): number {\n    return parseInt(this.props.hash.split('-')[1], 10);\n  }\n\n  getQuestion(): Question | undefined {\n    return this.props.questions.find((question) => question.id === this.getQuestionsId());\n  }\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst FaqPanel: React.FC = () => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h3>Mikä tämä on?</h3>\n          <p>\n            Hauska peli jonka tein tyypatessa <a href=\"https://nestjs.com/\">Nest.js</a>:ää. Vaikuttaa ihan hauskalta freimikseltä.\n          </p>\n          <hr />\n          <h3>Miten tämä toimii?</h3>\n          <p>\n            Helposti: arvotaan ensin kysymys ja siihen kaksi yritystä. Käyttäjä valitsee yrityksen joka vastaa kysymykseen hänen mielestä paremmin. Pisteet lasketaan kysymyksittäin käyttäen vanha kunnon (Clanbasesta tuttua) <a href=\"https://en.wikipedia.org/wiki/Elo_rating_system\">ELO-lukua</a>.\n          </p>\n          <hr />\n          <h3>Miten saan yritykseni mukaan?</h3>\n          <p>\n            Heitä ehdotus yrityksestä minulle meilitse: <a href=\"mailto:teemu@talented.fi?subject=Uusi%20yritys%20Firma-battleen&body=Heippa%2C%0A%0Alis%C3%A4tk%C3%A4%C3%A4%20t%C3%A4m%C3%A4%20yritys%20Firma-battleen%3A%0A%0AYritys%3A%20%0AKotisivu%3A%20%0A%0AKiitos!\">teemu@talented.fi</a>.\n          </p>\n        </Col>\n      </Row>\n    </Container>\n  )\n};\n\nexport default FaqPanel;\n","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport axios from 'axios';\nimport config from '../config';\nimport Spinner from '../common/Spinner';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { fadeOutUp, fadeOutDown } from 'react-animations';\nimport {css, StyleSheet} from 'aphrodite';\nimport './PlayingModal.scss';\n\ntype PlayingModalProps = {\n  showing: boolean,\n  onClose: () => void\n};\n\ntype Question = {\n  id: number,\n  text: string\n};\n\ntype Company = {\n  id: number,\n  name: string,\n  logo: string,\n  winner: boolean | undefined\n};\n\ntype Results = {\n  winnerScore: number,\n  winnerDelta: number,\n  loserScore: number,\n  loserDelta: number\n};\n\ntype PlayingModalState = {\n  question: Question | undefined,\n  companies: Array<Company>,\n  results: Results | undefined,\n  voteLoading: boolean\n};\n\nclass PlayingModal extends Component<PlayingModalProps, PlayingModalState> {\n  static getEmptyState () {\n    return {\n      question: undefined,\n      companies: [],\n      results: undefined,\n      voteLoading: false\n    };\n  }\n\n  constructor(props: PlayingModalProps) {\n    super(props);\n    this.state = PlayingModal.getEmptyState();\n    this.handleClose = this.handleClose.bind(this);\n    this.loadQuestion = this.loadQuestion.bind(this);\n    this.voteForCompany = this.voteForCompany.bind(this);\n  }\n\n  handleClose(): void {\n    this.props.onClose();\n    this.setState(PlayingModal.getEmptyState());\n  }\n\n  render () {\n    const {showing} = this.props;\n    return (\n      <Modal\n        centered\n        size=\"xl\"\n        show={showing}\n        onEntered={this.loadQuestion}\n        onHide={this.handleClose}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <Modal.Body>\n          {this.defineContent()}\n        </Modal.Body>\n      </Modal>\n    );\n  }\n\n  defineContent() {\n    const {question, companies: [company1, company2]} = this.state;\n\n    if (question && company1 && company2) {\n      return this.renderBody(question, company1, company2);\n    }\n\n    return <Spinner />\n  }\n\n  renderBody (question: Question, company1: Company, company2: Company) {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h3>{question.text}</h3>\n          </Col>\n        </Row>\n        <Row>\n          {this.renderCompany(company1)}\n          {this.renderCompany(company2)}\n        </Row>\n      </Container>\n    )\n  }\n\n  renderCompany (company: Company) {\n    return (\n      <Col>\n        <Card>\n          <Card.Img variant=\"top\" src={`${config.image_endpoint}/${company.logo}`} />\n          {this.renderButton(company)}\n        </Card>\n      </Col>\n    )\n  }\n\n  renderButton (company: Company) {\n    const {voteLoading, results} = this.state;\n    const styles = StyleSheet.create({\n      up: {\n        animationName: fadeOutUp,\n        animationDuration: '2.5s'\n      },\n      down: {\n        animationName: fadeOutDown,\n        animationDuration: '2.5s'\n      }\n    });\n\n    if (voteLoading && company.winner) {\n      return <Spinner />;\n    }\n\n    if (results && company.winner) {\n      return (\n        <h4 className={`score-up text-success ${css(styles.up)}`}>\n          +{results.winnerDelta} pistettä\n        </h4>\n      );\n    }\n\n    if (results) {\n      return (\n        <h4 className={`score-down text-danger ${css(styles.down)}`}>\n          {results.loserDelta} pistettä\n        </h4>\n      );\n    }\n\n    return (\n      <Button variant=\"primary\" onClick={() => this.voteForCompany(company.id)}>\n        {company.name}\n      </Button>\n    );\n  }\n\n  async loadQuestion(): Promise<void> {\n    try {\n      const companiesResponse = await axios.get(`${config.api_endpoint}/companies/random`);\n      const questionResponse = await axios.get(`${config.api_endpoint}/questions/random`);\n      this.setState({\n        companies: companiesResponse.data,\n        question: questionResponse.data\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  voteForCompany(winnerId: number): void {\n    try {\n      const companies = this.state.companies.map((company) => {\n        company.winner = Boolean(company.id === winnerId);\n        return company;\n      });\n      this.setState({companies}, async (): Promise<void> => {\n        const loserId: number = this.state.companies.find((c: Company): boolean => c.id !== winnerId)!.id;\n        const questionId: number = this.state.question!.id;\n        const response = await axios.post(`${config.api_endpoint}/vote`, {winnerId, loserId, questionId});\n        this.setState({results: response.data}, () => {\n          setTimeout(() => {\n            this.setState(PlayingModal.getEmptyState(), () => {\n              this.loadQuestion();\n            });\n          }, 2000);\n        });\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport default PlayingModal;\n","import React, {useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport PlayingModal from './PlayingModal';\n\nconst HomePanel: React.FC = () => {\n  const [playing, setPlaying] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron fluid>\n            <Container>\n              <h1>Firma-battle!</h1>\n              <h5 className=\"font-weight-normal\">Mihin tarvii faktaa kun on fiilistä? Nyt laitetaan Suomen IT-alan firmat oikeasti järjestykseen.</h5>\n              <hr />\n              <p>\n                <Button size=\"lg\" variant=\"primary\" onClick={() => setPlaying(true)}>Aloita</Button>\n              </p>\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <PlayingModal showing={playing} onClose={() => setPlaying(false)} />\n    </Container>\n  );\n};\n\nexport default HomePanel;\n","import React, {Fragment} from 'react';\nimport {Company, Score} from '../App';\nimport Spinner from '../common/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport './CompanyScoresPanel.scss';\n\ntype Props = {\n  company: Company | undefined,\n  scores: Score[] | undefined,\n  questionId?: number\n}\n\nconst CompanyScoresPanel: React.FC<Props> = ({company, scores}) => {\n  if (!company || !scores || !scores.length) {\n    return <Spinner />;\n  }\n\n  return (\n    <Fragment>\n      <h2 className=\"Scores-title\">{company.name}</h2>\n      <Table striped hover>\n        <thead>\n        <tr>\n          <th>Vastustaja</th>\n          <th>Kysymys</th>\n          <th>Pisteet</th>\n          <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        {renderScores(scores)}\n        </tbody>\n      </Table>\n    </Fragment>\n  );\n\n  function renderScores(scores: Score[]) {\n    return scores.map((score, i) => {\n      return (\n        <tr key={i}>\n          <td><a href={`#yritykset-${score.opponentId}`}>{score.opponentName}</a></td>\n          <td><a href={`#kysymykset-${score.questionId}`}>{score.questionText}</a></td>\n          {renderDelta(score.delta)}\n          {renderArrow(score.delta)}\n        </tr>\n      )\n    })\n  }\n\n  function renderDelta(delta: number) {\n    if (delta >= 0) {\n      return <td className=\"text-success\">+{delta}</td>;\n    }\n    return <td className=\"text-danger\">{delta}</td>;\n  }\n\n  function renderArrow(delta: number) {\n    if (delta >= 0) {\n      return <td><div className=\"arrow-up\"/></td>;\n    }\n    return <td><div className=\"arrow-down\"/></td>;\n  }\n};\n\nexport default CompanyScoresPanel;\n","import React, {Component} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport axios from 'axios';\nimport {Company, UpdateCompaniesState} from '../App';\nimport config from '../config';\nimport CompanyScoresPanel from './CompanyScoresPanel';\n\ntype CompaniesProps = {\n  hash: string,\n  updateState: (state: UpdateCompaniesState) => void,\n  companies: Company[]\n}\n\ntype CompaniesState = {}\n\nexport default class CompaniesPanel extends Component<CompaniesProps, CompaniesState> {\n  async componentDidMount(): Promise<void> {\n    try {\n      const response = await axios.get(`${config.api_endpoint}/companies`);\n      this.props.updateState({companies: response.data});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async componentDidUpdate(): Promise<void> {\n    const companyId: number = this.getCompanyId();\n\n    if (companyId) {\n      const company = this.getCompany();\n      if (company && !company.questions) {\n        await this.fetchQuestions(companyId);\n        await this.fetchScores(companyId);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {this.defineContent()}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  defineContent() {\n    const companyId = this.getCompanyId();\n\n    if (companyId) {\n      const company = this.getCompany();\n      return <CompanyScoresPanel company={company} scores={company && company.scores}/>;\n    }\n\n    return (\n      <ListGroup variant=\"flush\">\n        {this.renderCompanies()}\n      </ListGroup>\n    );\n  }\n\n  renderCompanies() {\n    return this.props.companies.map((company) => {\n      return (\n        <ListGroup.Item key={company.id} action href={`#yritykset-${company.id}`}>\n          {company.name}\n        </ListGroup.Item>\n      );\n    });\n  }\n\n  async fetchQuestions(companyId: number): Promise<void> {\n    const {companies, updateState} = this.props;\n    try {\n      const response = await axios.get(`${config.api_endpoint}/companies/${companyId}/questions`);\n      const patchedCompanies = companies.map((company) => {\n        if (company.id === companyId) {\n          company.questions = response.data;\n        }\n        return company;\n      });\n      updateState({companies: patchedCompanies});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async fetchScores(companyId: number): Promise<void> {\n    const {companies, updateState} = this.props;\n    try {\n      const response = await axios.get(`${config.api_endpoint}/companies/${companyId}/scores`);\n      const patchedCompanies = companies.map((company) => {\n        if (company.id === companyId) {\n          company.scores = response.data;\n        }\n        return company;\n      });\n      updateState({companies: patchedCompanies});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  getCompanyId(): number {\n    return parseInt(this.props.hash.split('-')[1], 10);\n  }\n\n  getCompany(): Company | undefined {\n    return this.props.companies.find((company) => company.id === this.getCompanyId());\n  }\n}\n","import React, {Component, Fragment} from 'react';\nimport './App.scss';\nimport Header from './Header';\nimport QuestionsPanel from './questions/QuestionsPanel';\nimport FaqPanel from './faq/FaqPanel';\nimport HomePanel from './home/HomePanel';\nimport CompaniesPanel from './companies/CompaniesPanel';\n\ntype AppProps = {};\n\nexport type Score = {\n  id: number,\n  score: number,\n  delta: number,\n  name: string,\n  wins: number,\n  scores: number,\n  pluralText: string,\n  opponentName?: string,\n  opponentId?: number,\n  companyId?: number,\n  questionText?: string\n  questionId?: number\n};\n\nexport type Question = {\n  id: number,\n  text: string,\n  pluralText: string,\n  scores: Score[],\n  score?: number\n};\n\nexport type Company = {\n  id: number,\n  name: string,\n  questions: Question[],\n  scores: Score[],\n};\n\ntype AppState = {\n  hash: string,\n  questions: Question[],\n  companies: Company[]\n};\n\nexport type UpdateQuestionsState = {\n  questions: Question[]\n}\n\nexport type UpdateCompaniesState = {\n  companies: Company[]\n}\n\nclass App extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      hash: document.location.hash,\n      questions: [],\n      companies: []\n    };\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('hashchange', (): void => {\n      this.setState({\n        hash: document.location.hash\n      });\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header/>\n        <div className=\"App\">\n          {this.defineContent()}\n        </div>\n      </Fragment>\n    );\n  }\n\n  defineContent() {\n    const {hash, questions, companies} = this.state;\n\n    if (hash.includes('#kysymykset')) {\n      return <QuestionsPanel hash={hash} questions={questions} updateState={(state: UpdateQuestionsState) => this.setState(state)}/>;\n    } else if (hash.includes('#yritykset')) {\n      return <CompaniesPanel hash={hash} companies={companies} updateState={(state: UpdateCompaniesState) => this.setState(state)} />;\n    } else if (hash === '#faq') {\n      return <FaqPanel/>;\n    }\n\n    return <HomePanel/>;\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}