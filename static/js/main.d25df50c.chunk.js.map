{"version":3,"sources":["common/Header.tsx","common/Footer.tsx","config.ts","common/Spinner.tsx","questions/QuestionScoresPanel.tsx","questions/QuestionsPanel.tsx","faq/FaqPanel.tsx","home/PlayingModal.tsx","home/HomePanel.tsx","companies/CompanyScoresPanel.tsx","companies/CompaniesPanel.tsx","App.tsx","index.tsx"],"names":["Header","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","className","Link","Footer","hash","fixed","endpoint","api_endpoint","image_endpoint","defaultOptions","size","color1","color2","color3","color4","HomePanel","options","additionalClasses","classNames","QuestionScoresPanel","question","scores","pluralText","striped","hover","map","score","i","key","companyId","name","wins","renderScores","QuestionsPanel","axios","get","config","response","this","props","updateState","questions","data","console","error","parseInt","split","getQuestion","patchedQuestions","defineContent","getQuestionsId","variant","renderQuestions","Item","action","find","Component","FaqPanel","PlayingModal","newQuestion","setState","getEmptyState","loadQuestion","state","handleClose","bind","voteForCompany","undefined","companies","results","onClose","showing","centered","show","onEntered","onHide","aria-labelledby","closeButton","Body","company1","company2","renderBody","text","renderCompany","onClick","company","Img","src","logo","alt","renderPoints","styles","StyleSheet","create","up","animationName","fadeOutUp","animationDuration","down","fadeOutDown","winner","css","winnerDelta","loserDelta","companiesResponse","questionResponse","winnerId","Boolean","a","loserId","c","questionId","post","setTimeout","e","useState","playing","setPlaying","fluid","CompanyScoresPanel","length","questionText","opponentId","opponentName","delta","renderDelta","opponentDelta","renderOpponentDelta","renderArrow","CompaniesPanel","getCompanyId","getCompany","fetchQuestions","fetchScores","reduce","acc","push","renderCompanies","patchedCompanies","App","document","location","window","addEventListener","includes","ReactDOM","render","getElementById"],"mappings":"8YAuBeA,EAlBU,WACvB,OACE,kBAAC,IAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAAC,IAAD,KACE,kBAAC,IAAOC,MAAR,CAAcC,KAAK,MAAnB,eACA,kBAAC,IAAOC,OAAR,CAAeC,gBAAc,qBAC7B,kBAAC,IAAOC,SAAR,CAAiBC,GAAG,UAClB,kBAAC,IAAD,CAAKC,UAAU,WACb,kBAAC,IAAIC,KAAL,CAAUN,KAAK,cAAf,YACA,kBAAC,IAAIM,KAAL,CAAUN,KAAK,eAAf,aACA,kBAAC,IAAIM,KAAL,CAAUN,KAAK,SAAf,YCMGO,G,OAbiB,SAAC,GAC/B,OAD0C,EAAVC,KAEvB,KAGP,kBAAC,IAAD,CAAQX,GAAG,QAAQY,MAAM,UACvB,uBAAGJ,UAAU,eAAb,gCACsB,uBAAGL,KAAK,8BAAR,qBADtB,OACoF,uBAAGA,KAAK,uBAAR,YADpF,2H,4FCdAU,EAAmB,yCAEV,GACbC,aAAcD,EACdE,eAAe,GAAD,OAAKF,EAAL,Y,oQCahB,IAAMG,EAAiB,CACrBC,KAAM,GACNC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,WAiBKC,EAd2B,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,kBAC/CC,EAAqB,UAMzB,OAJID,IACFC,GAAc,IAAMD,GAIpB,yBAAKhB,UAAWiB,GACd,kBAAC,I,qVAAD,IAAmBT,EAAnB,CAAmCO,eCgB1BG,G,OAxCiD,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC9D,OAAKA,GAAaA,EAASC,OAKzB,kBAAC,WAAD,KACE,wBAAIpB,UAAU,gBAAgBmB,EAASE,YACvC,kBAAC,IAAD,CAAOC,SAAO,EAACC,OAAK,GAClB,+BACE,4BACE,iCACA,uCACA,oCACA,sCACA,yCAGJ,+BAOR,SAAsBJ,GACpB,OAAOA,EAASC,OAAOI,IAAI,SAACC,EAAOC,GACjC,OACE,wBAAIC,IAAKF,EAAM1B,IACb,4BAAK2B,EAAE,EAAP,KACA,4BAAKD,EAAMA,OACX,4BAAI,uBAAG9B,KAAI,qBAAgB8B,EAAMG,YAAcH,EAAMI,OACrD,4BAAKJ,EAAMK,MACX,4BAAKL,EAAML,OAASK,EAAMK,SAdvBC,CAAaZ,MAjBb,kBAAC,EAAD,QCOQa,E,mUAGQC,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,e,OAAjB8B,E,OACNC,KAAKC,MAAMC,YAAY,CAACC,UAAWJ,EAASK,O,gDAE5CC,QAAQC,MAAR,M,yRAKqCN,KAAKC,MAArCnC,E,EAAAA,KAAMqC,E,EAAAA,UAAWD,E,EAAAA,cAClBxC,EAAa6C,SAASzC,EAAK0C,MAAM,KAAK,GAAI,K,sBAGxC1B,EAAWkB,KAAKS,gBACL3B,EAASC,O,0CAECa,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,sBAA8CP,EAA9C,Y,OAAjBqC,E,OACAW,EAAmBP,EAAUhB,IAAI,SAACL,GAItC,OAHIA,EAASpB,KAAOA,IAClBoB,EAASC,OAASgB,EAASK,MAEtBtB,IAEToB,EAAY,CAACC,UAAWO,I,kDAExBL,QAAQC,MAAR,M,6IAON,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGN,KAAKW,qB,sCAUd,OAFWX,KAAKY,iBAGP,kBAAC,EAAD,CAAqB9B,SAAUkB,KAAKS,gBAI3C,oCACE,wBAAI9C,UAAU,gBAAd,mBACA,kBAAC,IAAD,CAAWkD,QAAQ,SAChBb,KAAKc,sB,wCAOZ,OAAOd,KAAKC,MAAME,UAAUhB,IAAI,SAACL,GAC/B,OACE,kBAAC,IAAUiC,KAAX,CAAgBzB,IAAKR,EAASpB,GAAIsD,QAAM,EAAC1D,KAAI,oBAAewB,EAASpB,KAClEoB,EAASE,gB,uCAOhB,OAAOuB,SAASP,KAAKC,MAAMnC,KAAK0C,MAAM,KAAK,GAAI,M,oCAGZ,IAAD,OAClC,OAAOR,KAAKC,MAAME,UAAUc,KAAK,SAACnC,GAAD,OAAcA,EAASpB,KAAO,EAAKkD,uB,GA7E5BM,aCW7BC,EAzBY,WACzB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,sDACA,gEACoC,uBAAG7D,KAAK,uBAAR,WADpC,wDAGA,6BACA,wDACA,6QACsN,uBAAGA,KAAK,mDAAR,aADtN,KAGA,6BACA,6DACA,wEACsC,uBAAGA,KAAK,2MAAR,qBADtC,S,wHC0LK8D,I,mBAzJb,WAAYnB,GAA2B,IAAD,8BACpC,4CAAMA,KAiJRoB,YAAc,WACZ,EAAKC,SAASF,EAAaG,gBAAiB,WAC1C,EAAKC,kBAlJP,EAAKC,MAAQL,EAAaG,gBAC1B,EAAKG,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKH,aAAe,EAAKA,aAAaG,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBALc,E,kFAPpC,MAAO,CACL7C,cAAU+C,EACVC,UAAW,GACXC,aAASF,O,mDAaX7B,KAAKC,MAAM+B,UACXhC,KAAKsB,SAASF,EAAaG,mB,+BAGlB,IACFU,EAAWjC,KAAKC,MAAhBgC,QACP,OACE,kBAAC,IAAD,CACEC,UAAQ,EACR9D,KAAK,KACL+D,KAAMF,EACNG,UAAWpC,KAAKwB,aAChBa,OAAQrC,KAAK0B,YACbY,kBAAgB,gCAEhB,kBAAC,KAAD,CAAaC,aAAa,IAC1B,kBAAC,IAAMC,KAAP,KACGxC,KAAKW,oB,sCAMG,IAAD,EACsCX,KAAKyB,MAAlD3C,EADO,EACPA,SADO,gBACGgD,UADH,GACeW,EADf,KACyBC,EADzB,KAGd,OAAI5D,GAAY2D,GAAYC,EACnB1C,KAAK2C,WAAW7D,EAAU2D,EAAUC,GAGtC,kBAAC,EAAD,Q,iCAGG5D,EAAoB2D,EAAmBC,GAAoB,IAAD,OACpE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,4BAAK5D,EAAS8D,QAGlB,kBAAC,IAAD,KACG5C,KAAK6C,cAAcJ,GACnBzC,KAAK6C,cAAcH,IAEtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yBAAK/E,UAAU,eACb,kBAAC,IAAD,CAAQkD,QAAQ,OAAOiC,QAAS,kBAAM,EAAKzB,gBAA3C,WACA,uBAAG1D,UAAU,eAAeL,KAAK,aAAjC,kB,oCAQGyF,GAAmB,IAAD,OAC/B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAKC,IAAN,CACEnC,QAAQ,MACRoC,IAAG,UAAKnD,EAAO5B,eAAZ,YAA8B6E,EAAQG,MACzCC,IAAKJ,EAAQvD,KACbsD,QAAS,kBAAM,EAAKlB,eAAemB,EAAQrF,OAE5CsC,KAAKoD,aAAaL,O,mCAMbA,GAAmB,IACxBhB,EAAW/B,KAAKyB,MAAhBM,QACDsB,EAASC,KAAWC,OAAO,CAC/BC,GAAI,CACFC,cAAeC,aACfC,kBAAmB,QAErBC,KAAM,CACJH,cAAeI,eACfF,kBAAmB,UAIvB,OAAI5B,GAAWgB,EAAQe,OAEnB,wBAAInG,UAAS,gCAA2BoG,aAAIV,EAAOG,MAAnD,IACIzB,EAAQiC,YADZ,gBAMAjC,EAEA,wBAAIpE,UAAS,iCAA4BoG,aAAIV,EAAOO,QACjD7B,EAAQkC,WADX,qBAFJ,I,8KAWkCrE,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,sB,cAA1BiG,E,gBACyBtE,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,sB,OAAzBkG,E,OACNnE,KAAKsB,SAAS,CACZQ,UAAWoC,EAAkB9D,KAC7BtB,SAAUqF,EAAiB/D,O,kDAG7BC,QAAQC,MAAR,M,mJAIW8D,GAAyB,IAAD,OACrC,IACE,IAAMtC,EAAY9B,KAAKyB,MAAMK,UAAU3C,IAAI,SAAC4D,GAE1C,OADAA,EAAQe,OAASO,QAAQtB,EAAQrF,KAAO0G,GACjCrB,IAET/C,KAAKsB,SAAS,CAACQ,aAAf,qBAA2B,gCAAAwC,EAAA,4DACnBC,EAAkB,EAAK9C,MAAMK,UAAUb,KAAK,SAACuD,GAAD,OAAyBA,EAAE9G,KAAO0G,IAAW1G,GACzF+G,EAAqB,EAAKhD,MAAM3C,SAAUpB,GAFvB,SAGFkC,IAAM8E,KAAN,UAAc5E,EAAO7B,aAArB,SAA0C,CAACmG,WAAUG,UAASE,eAH5D,OAGnB1E,EAHmB,OAIzB,EAAKuB,SAAS,CAACS,QAAShC,EAASK,MAAO,WACtCuE,WAAW,WACT,EAAKtD,eACJ,OAPoB,0CAU3B,MAAOuD,GACPvE,QAAQC,MAAMsE,Q,GAvJO1D,cCPZzC,GA9Ba,WAAO,IAAD,EACFoG,oBAAS,GADP,mBACzBC,EADyB,KAChBC,EADgB,KAGhC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,KACE,4CACA,wBAAIrH,UAAU,sBAAd,0GAGA,wQAG+B,uBAAGL,KAAK,aAAR,mBAH/B,KAKA,2BACE,kBAAC,IAAD,CAAQc,KAAK,KAAKyC,QAAQ,UAAUiC,QAAS,kBAAMiC,GAAW,KAA9D,eAMV,kBAAC,GAAD,CAAc9C,QAAS6C,EAAS9C,QAAS,kBAAM+C,GAAW,QCyCjDE,I,OA9D6B,SAAC,GAAuB,IAAtBlC,EAAqB,EAArBA,QAAShE,EAAY,EAAZA,OACrD,OAAKgE,GAAYhE,GAAWA,EAAOmG,OAKjC,kBAAC,WAAD,KACE,wBAAIvH,UAAU,gBAAgBoF,EAAQvD,MACtC,kBAAC,IAAD,CAAOP,SAAO,EAACC,OAAK,GAClB,+BACA,4BACE,uCACA,0CACA,kCACA,kCACA,+BAGF,+BAON,SAAsBH,GACpB,OAAOA,EAAOI,IAAI,SAACC,EAAOC,GACxB,OACE,wBAAIC,IAAKD,GACP,4BAAI,uBAAG/B,KAAI,oBAAe8B,EAAMqF,aAAerF,EAAM+F,eACrD,4BAAI,uBAAG7H,KAAI,qBAAgB8B,EAAMgG,aAAehG,EAAMiG,eAiB9D,SAAqBC,GACnB,GAAIA,GAAS,EACX,OAAO,wBAAI3H,UAAU,gBAAd,IAA+B2H,GAExC,OAAO,wBAAI3H,UAAU,eAAe2H,GApB7BC,CAAYnG,EAAMkG,OAQ3B,SAA6BA,GAC3B,IAAME,GAAiC,EAATF,EAC9B,GAAIE,GAAiB,EACnB,OAAO,wBAAI7H,UAAU,gBAAd,IAA+B6H,GAExC,OAAO,wBAAI7H,UAAU,eAAe6H,GAZ7BC,CAAoBrG,EAAMkG,OAsBnC,SAAqBA,GACnB,GAAIA,GAAS,EACX,OAAO,4BAAI,yBAAK3H,UAAU,cAE5B,OAAO,4BAAI,yBAAKA,UAAU,gBAzBnB+H,CAAYtG,EAAMkG,UAdpB5F,CAAaX,MAjBX,kBAAC,EAAD,QCIU4G,G,mUAGQ/F,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,e,OAAjB8B,E,OACNC,KAAKC,MAAMC,YAAY,CAAC4B,UAAW/B,EAASK,O,gDAE5CC,QAAQC,MAAR,M,6QAKIf,EAAoBS,KAAK4F,gB,qBAGvB7C,EAAU/C,KAAK6F,eACL9C,EAAQ5C,U,gCAChBH,KAAK8F,eAAevG,G,uBACpBS,KAAK+F,YAAYxG,G,mIAM3B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGS,KAAKW,oB,sCAMG,IAAD,OAGd,GAFkBX,KAAK4F,eAER,CACb,IAAM7C,EAAU/C,KAAK6F,aACrB,OAAO,kBAAC,GAAD,CAAoB9C,QAASA,EAAShE,OAAQgE,GAAWA,EAAQhE,SAc1E,OAXmCiB,KAAKC,MAAM6B,UAAUkE,OAAO,SAACC,EAAkBzB,EAAYnF,GAQ5F,OAPIA,EAAI,IAAM,EACZ4G,EAAI,GAAGC,KAAK1B,GACHnF,EAAI,IAAM,EACnB4G,EAAI,GAAGC,KAAK1B,GAEZyB,EAAI,GAAGC,KAAK1B,GAEPyB,GACN,CAAC,GAAI,GAAI,KAES9G,IAAI,SAAC2C,GACxB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWjB,QAAQ,SAChB,EAAKsF,gBAAgBrE,S,sCAOhBA,GACd,OAAOA,EAAU3C,IAAI,SAAC4D,GACpB,OACE,kBAAC,IAAUhC,KAAX,CAAgBzB,IAAKyD,EAAQrF,GAAIsD,QAAM,EAAC1D,KAAI,qBAAgByF,EAAQrF,KACjEqF,EAAQvD,U,6EAMID,G,uFACcS,KAAKC,MAA/B6B,E,EAAAA,UAAW5B,E,EAAAA,Y,kBAEON,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,sBAA8CsB,EAA9C,e,OAAjBQ,E,OACAqG,EAAmBtE,EAAU3C,IAAI,SAAC4D,GAItC,OAHIA,EAAQrF,KAAO6B,IACjBwD,EAAQ5C,UAAYJ,EAASK,MAExB2C,IAET7C,EAAY,CAAC4B,UAAWsE,I,gDAExB/F,QAAQC,MAAR,M,wLAIcf,G,uFACiBS,KAAKC,MAA/B6B,E,EAAAA,UAAW5B,E,EAAAA,Y,kBAEON,IAAMC,IAAN,UAAaC,EAAO7B,aAApB,sBAA8CsB,EAA9C,Y,OAAjBQ,E,OACAqG,EAAmBtE,EAAU3C,IAAI,SAAC4D,GAItC,OAHIA,EAAQrF,KAAO6B,IACjBwD,EAAQhE,OAASgB,EAASK,MAErB2C,IAET7C,EAAY,CAAC4B,UAAWsE,I,gDAExB/F,QAAQC,MAAR,M,mJAKF,OAAOC,SAASP,KAAKC,MAAMnC,KAAK0C,MAAM,KAAK,GAAI,M,mCAGd,IAAD,OAChC,OAAOR,KAAKC,MAAM6B,UAAUb,KAAK,SAAC8B,GAAD,OAAaA,EAAQrF,KAAO,EAAKkI,qB,GA7G1B1E,aCmF7BmF,G,YA7Cb,WAAYpG,GAAkB,IAAD,8BAC3B,4CAAMA,KACDwB,MAAQ,CACX3D,KAAMwI,SAASC,SAASzI,KACxBqC,UAAW,GACX2B,UAAW,IALc,E,iFASF,IAAD,OACxB0E,OAAOC,iBAAiB,aAAc,WACpC,EAAKnF,SAAS,CACZxD,KAAMwI,SAASC,SAASzI,W,+BAM5B,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,yBAAKH,UAAU,OACZqC,KAAKW,iBAER,kBAAC,EAAD,CAAQ7C,KAAMkC,KAAKyB,MAAM3D,U,sCAKd,IAAD,SACuBkC,KAAKyB,MAAnC3D,EADO,EACPA,KAAMqC,EADC,EACDA,UAAW2B,EADV,EACUA,UAExB,OAAIhE,EAAK4I,SAAS,aACT,kBAAC,EAAD,CAAgB5I,KAAMA,EAAMqC,UAAWA,EAAWD,YAAa,SAACuB,GAAD,OAAiC,EAAKH,SAASG,MAC5G3D,EAAK4I,SAAS,cAChB,kBAAC,GAAD,CAAgB5I,KAAMA,EAAMgE,UAAWA,EAAW5B,YAAa,SAACuB,GAAD,OAAiC,EAAKH,SAASG,MACnG,SAAT3D,EACF,kBAAC,EAAD,MAGF,kBAAC,GAAD,U,GAzCOoD,aClDlByF,IAASC,OAAO,kBAAC,GAAD,MAASN,SAASO,eAAe,U","file":"static/js/main.d25df50c.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst Header: React.FC = () => {\n  return (\n    <Navbar bg=\"light\" expand=\"md\">\n      <Container>\n        <Navbar.Brand href=\"/#\">Firmabattle</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"navbar\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/#tulokset\">Tulokset</Nav.Link>\n            <Nav.Link href=\"/#yritykset\">Yritykset</Nav.Link>\n            <Nav.Link href=\"/#faq\">FAQ</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Footer.scss';\n\ntype Props = {\n  hash: string | undefined\n};\n\nconst Footer: React.FC<Props> = ({hash}) => {\n  if (hash) {\n    return null;\n  }\n  return (\n    <Navbar bg=\"light\" fixed=\"bottom\">\n      <p className=\"Footer-text\">\n        Tämän sivun tekivät <a href=\"https://github.com/varmais\">Teemu Tiilikainen</a> ja <a href=\"https://talented.fi\">Talented</a> – Talented auttaa tekijöitä löytämään parhaat firmat ja huonoja firmoja tulemaan paremmiksi.\n      </p>\n    </Navbar>\n  );\n};\n\nexport default Footer;\n","const endpoint: string = 'https://firma-battle-api.herokuapp.com';\n\nexport default {\n  api_endpoint: endpoint,\n  image_endpoint: `${endpoint}/images`\n};\n","import React from 'react';\nimport MDSpinner from 'react-md-spinner';\nimport './Spinner.scss';\n\ntype Options = {\n  size: number,\n  color1: string,\n  color2: string,\n  color3: string,\n  color4: string\n}\n\ntype SpinnerProps = {\n  options?: Options,\n  additionalClasses?: string\n};\n\nconst defaultOptions = {\n  size: 32,\n  color1: '#07f9a5',\n  color2: '#f488ff',\n  color3: '#07f9a5',\n  color4: '#ffd231'\n};\n\nconst HomePanel: React.FC<SpinnerProps> = ({options, additionalClasses}) => {\n  let classNames: string = 'Spinner';\n\n  if (additionalClasses) {\n    classNames += ' ' + additionalClasses;\n  }\n\n  return (\n    <div className={classNames}>\n      <MDSpinner {...{...defaultOptions, options}} />\n    </div>\n  )\n};\n\nexport default HomePanel;\n","import React, {Fragment} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport {Question} from '../App';\nimport Spinner from '../common/Spinner';\nimport './QuestionScoresPanel.scss';\n\ntype QuestionScoresPanelProps = {\n  question: Question | undefined\n}\n\nconst QuestionScoresPanel: React.FC<QuestionScoresPanelProps> = ({question}) => {\n    if (!question || !question.scores) {\n      return <Spinner />;\n    }\n\n    return (\n      <Fragment>\n        <h2 className=\"Scores-title\">{question.pluralText}</h2>\n        <Table striped hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Pisteet</th>\n              <th>Nimi</th>\n              <th>Voitot</th>\n              <th>Tappiot</th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderScores(question)}\n          </tbody>\n        </Table>\n      </Fragment>\n    );\n\n  function renderScores(question: Question) {\n    return question.scores.map((score, i) => {\n      return (\n        <tr key={score.id}>\n          <td>{i+1}.</td>\n          <td>{score.score}</td>\n          <td><a href={`#yritykset-${score.companyId}`}>{score.name}</a></td>\n          <td>{score.wins}</td>\n          <td>{score.scores - score.wins}</td>\n        </tr>\n      )\n    })\n  }\n};\n\nexport default QuestionScoresPanel;\n","import React, {Component} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport axios from 'axios';\nimport {UpdateQuestionsState, Question} from '../App';\nimport config from '../config';\nimport QuestionScoresPanel from './QuestionScoresPanel';\n\ntype QuestionsPanelProps = {\n  hash: string,\n  updateState: (state: UpdateQuestionsState) => void,\n  questions: Question[]\n}\n\ntype QuestionsPanelState = {\n}\n\nexport default class QuestionsPanel extends Component<QuestionsPanelProps, QuestionsPanelState> {\n  async componentDidMount(): Promise<void> {\n    try {\n      const response = await axios.get(`${config.api_endpoint}/questions`);\n      this.props.updateState({questions: response.data});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async componentDidUpdate(): Promise<void> {\n    const {hash, questions, updateState} = this.props;\n    const id: number = parseInt(hash.split('-')[1], 10);\n\n    if (id) {\n      const question = this.getQuestion();\n      if (question && !question.scores) {\n        try {\n          const response = await axios.get(`${config.api_endpoint}/questions/${id}/scores`);\n          const patchedQuestions = questions.map((question) => {\n            if (question.id === id) {\n              question.scores = response.data;\n            }\n            return question;\n          });\n          updateState({questions: patchedQuestions});\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {this.defineContent()}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  defineContent() {\n    const id = this.getQuestionsId();\n\n    if (id) {\n      return <QuestionScoresPanel question={this.getQuestion()} />;\n    }\n\n    return (\n      <>\n        <h2 className=\"Scores-title\">Valitse kysymys</h2>\n        <ListGroup variant=\"flush\">\n          {this.renderQuestions()}\n        </ListGroup>\n      </>\n    );\n  }\n\n  renderQuestions() {\n    return this.props.questions.map((question) => {\n      return (\n        <ListGroup.Item key={question.id} action href={`#tulokset-${question.id}`}>\n          {question.pluralText}\n        </ListGroup.Item>\n      );\n    });\n  }\n\n  getQuestionsId(): number {\n    return parseInt(this.props.hash.split('-')[1], 10);\n  }\n\n  getQuestion(): Question | undefined {\n    return this.props.questions.find((question) => question.id === this.getQuestionsId());\n  }\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst FaqPanel: React.FC = () => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h3>Mikä tämä on?</h3>\n          <p>\n            Hauska peli jonka tein tyypatessa <a href=\"https://nestjs.com/\">Nest.js</a>:ää. Vaikuttaa ihan hauskalta freimikseltä.\n          </p>\n          <hr />\n          <h3>Miten tämä toimii?</h3>\n          <p>\n            Helposti: arvotaan ensin kysymys ja siihen kaksi yritystä. Käyttäjä valitsee yrityksen joka vastaa kysymykseen hänen mielestä paremmin. Pisteet lasketaan kysymyksittäin käyttäen vanha kunnon (Clanbasesta tuttua) <a href=\"https://en.wikipedia.org/wiki/Elo_rating_system\">ELO-lukua</a>.\n          </p>\n          <hr />\n          <h3>Miten saan yritykseni mukaan?</h3>\n          <p>\n            Heitä ehdotus yrityksestä meilitse: <a href=\"mailto:teemu@talented.fi?subject=Uusi%20yritys%20Firmabattleen&body=Heippa%2C%0A%0Alis%C3%A4tk%C3%A4%C3%A4%20t%C3%A4m%C3%A4%20yritys%20Firmabattleen%3A%0A%0AYritys%3A%20%0AKotisivu%3A%20%0A%0AKiitos!\">teemu@talented.fi</a>.\n          </p>\n        </Col>\n      </Row>\n    </Container>\n  )\n};\n\nexport default FaqPanel;\n","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport axios from 'axios';\nimport config from '../config';\nimport Spinner from '../common/Spinner';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport ModalHeader from 'react-bootstrap/ModalHeader';\nimport Button from 'react-bootstrap/Button';\nimport { fadeOutUp, fadeOutDown } from 'react-animations';\nimport {css, StyleSheet} from 'aphrodite';\nimport './PlayingModal.scss';\n\ntype PlayingModalProps = {\n  showing: boolean,\n  onClose: () => void\n};\n\ntype Question = {\n  id: number,\n  text: string\n};\n\ntype Company = {\n  id: number,\n  name: string,\n  logo: string,\n  winner: boolean | undefined\n};\n\ntype Results = {\n  winnerScore: number,\n  winnerDelta: number,\n  loserScore: number,\n  loserDelta: number\n};\n\ntype PlayingModalState = {\n  question: Question | undefined,\n  companies: Array<Company>,\n  results: Results | undefined\n};\n\nclass PlayingModal extends Component<PlayingModalProps, PlayingModalState> {\n  static getEmptyState () {\n    return {\n      question: undefined,\n      companies: [],\n      results: undefined\n    };\n  }\n\n  constructor(props: PlayingModalProps) {\n    super(props);\n    this.state = PlayingModal.getEmptyState();\n    this.handleClose = this.handleClose.bind(this);\n    this.loadQuestion = this.loadQuestion.bind(this);\n    this.voteForCompany = this.voteForCompany.bind(this);\n  }\n\n  handleClose(): void {\n    this.props.onClose();\n    this.setState(PlayingModal.getEmptyState());\n  }\n\n  render () {\n    const {showing} = this.props;\n    return (\n      <Modal\n        centered\n        size=\"lg\"\n        show={showing}\n        onEntered={this.loadQuestion}\n        onHide={this.handleClose}\n        aria-labelledby=\"example-modal-sizes-title-lg\"\n      >\n        <ModalHeader closeButton={true} />\n        <Modal.Body>\n          {this.defineContent()}\n        </Modal.Body>\n      </Modal>\n    );\n  }\n\n  defineContent() {\n    const {question, companies: [company1, company2]} = this.state;\n\n    if (question && company1 && company2) {\n      return this.renderBody(question, company1, company2);\n    }\n\n    return <Spinner />\n  }\n\n  renderBody (question: Question, company1: Company, company2: Company) {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h3>{question.text}</h3>\n          </Col>\n        </Row>\n        <Row>\n          {this.renderCompany(company1)}\n          {this.renderCompany(company2)}\n        </Row>\n        <Row>\n          <Col>\n            <div className=\"Modal-links\">\n              <Button variant=\"link\" onClick={() => this.newQuestion()}>Skippaa</Button>\n              <a className=\"btn btn-link\" href=\"#tulokset\">Tulokset</a>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n\n  renderCompany (company: Company) {\n    return (\n      <Col>\n        <Card>\n          <Card.Img\n            variant=\"top\"\n            src={`${config.image_endpoint}/${company.logo}`}\n            alt={company.name}\n            onClick={() => this.voteForCompany(company.id)}\n          />\n          {this.renderPoints(company)}\n        </Card>\n      </Col>\n    )\n  }\n\n  renderPoints (company: Company) {\n    const {results} = this.state;\n    const styles = StyleSheet.create({\n      up: {\n        animationName: fadeOutUp,\n        animationDuration: '2.5s'\n      },\n      down: {\n        animationName: fadeOutDown,\n        animationDuration: '2.5s'\n      }\n    });\n\n    if (results && company.winner) {\n      return (\n        <h4 className={`score-up text-success ${css(styles.up)}`}>\n          +{results.winnerDelta} pistettä\n        </h4>\n      );\n    }\n\n    if (results) {\n      return (\n        <h4 className={`score-down text-danger ${css(styles.down)}`}>\n          {results.loserDelta} pistettä\n        </h4>\n      );\n    }\n  }\n\n  async loadQuestion(): Promise<void> {\n    try {\n      const companiesResponse = await axios.get(`${config.api_endpoint}/companies/random`);\n      const questionResponse = await axios.get(`${config.api_endpoint}/questions/random`);\n      this.setState({\n        companies: companiesResponse.data,\n        question: questionResponse.data\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  voteForCompany(winnerId: number): void {\n    try {\n      const companies = this.state.companies.map((company) => {\n        company.winner = Boolean(company.id === winnerId);\n        return company;\n      });\n      this.setState({companies}, async (): Promise<void> => {\n        const loserId: number = this.state.companies.find((c: Company): boolean => c.id !== winnerId)!.id;\n        const questionId: number = this.state.question!.id;\n        const response = await axios.post(`${config.api_endpoint}/vote`, {winnerId, loserId, questionId});\n        this.setState({results: response.data}, () => {\n          setTimeout(() => {\n            this.newQuestion();\n          }, 2000);\n        });\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  newQuestion = () => {\n    this.setState(PlayingModal.getEmptyState(), () => {\n      this.loadQuestion();\n    });\n  }\n}\n\nexport default PlayingModal;\n","import React, {useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport PlayingModal from './PlayingModal';\n\nconst HomePanel: React.FC = () => {\n  const [playing, setPlaying] = useState(false);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Jumbotron fluid>\n            <Container>\n              <h1>Firmabattle!</h1>\n              <h5 className=\"font-weight-normal\">\n                Mihin tarvii faktaa kun on fiilistä? Nyt laitetaan Suomen IT-alan firmat oikeasti järjestykseen.\n              </h5>\n              <p>\n                Firmabattlessa valitset voittajan sen mukaan, kumpi yritys sinun mielestäsi vastaa paremmin\n                annettuun kysymykseen. Pisteenlasku ja ranking perustuu Clanbasesta tuttuun ELO-järjestelmään,\n                ja tuloksia pääset katsomaan <a href=\"#tulokset\">täältä</a>.\n              </p>\n              <p>\n                <Button size=\"lg\" variant=\"primary\" onClick={() => setPlaying(true)}>Aloita</Button>\n              </p>\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <PlayingModal showing={playing} onClose={() => setPlaying(false)} />\n    </Container>\n  );\n};\n\nexport default HomePanel;\n","import React, {Fragment} from 'react';\nimport {Company, Score} from '../App';\nimport Spinner from '../common/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport './CompanyScoresPanel.scss';\n\ntype Props = {\n  company: Company | undefined,\n  scores: Score[] | undefined,\n  questionId?: number\n}\n\nconst CompanyScoresPanel: React.FC<Props> = ({company, scores}) => {\n  if (!company || !scores || !scores.length) {\n    return <Spinner />;\n  }\n\n  return (\n    <Fragment>\n      <h2 className=\"Scores-title\">{company.name}</h2>\n      <Table striped hover>\n        <thead>\n        <tr>\n          <th>Kysymys</th>\n          <th>Vastustaja</th>\n          <th>Me</th>\n          <th>Ne</th>\n          <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        {renderScores(scores)}\n        </tbody>\n      </Table>\n    </Fragment>\n  );\n\n  function renderScores(scores: Score[]) {\n    return scores.map((score, i) => {\n      return (\n        <tr key={i}>\n          <td><a href={`#tulokset-${score.questionId}`}>{score.questionText}</a></td>\n          <td><a href={`#yritykset-${score.opponentId}`}>{score.opponentName}</a></td>\n          {renderDelta(score.delta)}\n          {renderOpponentDelta(score.delta)}\n          {renderArrow(score.delta)}\n        </tr>\n      )\n    })\n  }\n\n  function renderOpponentDelta(delta: number) {\n    const opponentDelta: number = delta * -1;\n    if (opponentDelta >= 0) {\n      return <td className=\"text-success\">+{opponentDelta}</td>;\n    }\n    return <td className=\"text-danger\">{opponentDelta}</td>;\n  }\n\n  function renderDelta(delta: number) {\n    if (delta >= 0) {\n      return <td className=\"text-success\">+{delta}</td>;\n    }\n    return <td className=\"text-danger\">{delta}</td>;\n  }\n\n  function renderArrow(delta: number) {\n    if (delta >= 0) {\n      return <td><div className=\"arrow-up\"/></td>;\n    }\n    return <td><div className=\"arrow-down\"/></td>;\n  }\n};\n\nexport default CompanyScoresPanel;\n","import React, {Component} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport axios from 'axios';\nimport {Company, UpdateCompaniesState} from '../App';\nimport config from '../config';\nimport CompanyScoresPanel from './CompanyScoresPanel';\n\ntype CompaniesProps = {\n  hash: string,\n  updateState: (state: UpdateCompaniesState) => void,\n  companies: Company[]\n}\n\ntype CompaniesState = {}\n\nexport default class CompaniesPanel extends Component<CompaniesProps, CompaniesState> {\n  async componentDidMount(): Promise<void> {\n    try {\n      const response = await axios.get(`${config.api_endpoint}/companies`);\n      this.props.updateState({companies: response.data});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async componentDidUpdate(): Promise<void> {\n    const companyId: number = this.getCompanyId();\n\n    if (companyId) {\n      const company = this.getCompany();\n      if (company && !company.questions) {\n        await this.fetchQuestions(companyId);\n        await this.fetchScores(companyId);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          {this.defineContent()}\n        </Row>\n      </Container>\n    );\n  }\n\n  defineContent() {\n    const companyId = this.getCompanyId();\n\n    if (companyId) {\n      const company = this.getCompany();\n      return <CompanyScoresPanel company={company} scores={company && company.scores}/>;\n    }\n\n    const companiesList: Company[][] = this.props.companies.reduce((acc: Company[][], c: Company, i: number) => {\n      if (i % 3 === 0) {\n        acc[0].push(c);\n      } else if (i % 2 === 0) {\n        acc[1].push(c);\n      } else {\n        acc[2].push(c);\n      }\n      return acc;\n    }, [[], [], []]);\n\n    return companiesList.map((companies) => {\n      return (\n        <Col>\n          <ListGroup variant=\"flush\">\n            {this.renderCompanies(companies)}\n          </ListGroup>\n        </Col>\n      );\n    });\n  }\n\n  renderCompanies(companies: Company[]) {\n    return companies.map((company) => {\n      return (\n        <ListGroup.Item key={company.id} action href={`#yritykset-${company.id}`}>\n          {company.name}\n        </ListGroup.Item>\n      );\n    });\n  }\n\n  async fetchQuestions(companyId: number): Promise<void> {\n    const {companies, updateState} = this.props;\n    try {\n      const response = await axios.get(`${config.api_endpoint}/companies/${companyId}/questions`);\n      const patchedCompanies = companies.map((company) => {\n        if (company.id === companyId) {\n          company.questions = response.data;\n        }\n        return company;\n      });\n      updateState({companies: patchedCompanies});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async fetchScores(companyId: number): Promise<void> {\n    const {companies, updateState} = this.props;\n    try {\n      const response = await axios.get(`${config.api_endpoint}/companies/${companyId}/scores`);\n      const patchedCompanies = companies.map((company) => {\n        if (company.id === companyId) {\n          company.scores = response.data;\n        }\n        return company;\n      });\n      updateState({companies: patchedCompanies});\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  getCompanyId(): number {\n    return parseInt(this.props.hash.split('-')[1], 10);\n  }\n\n  getCompany(): Company | undefined {\n    return this.props.companies.find((company) => company.id === this.getCompanyId());\n  }\n}\n","import React, {Component, Fragment} from 'react';\nimport './App.scss';\nimport Header from './common/Header';\nimport Footer from './common/Footer';\nimport QuestionsPanel from './questions/QuestionsPanel';\nimport FaqPanel from './faq/FaqPanel';\nimport HomePanel from './home/HomePanel';\nimport CompaniesPanel from './companies/CompaniesPanel';\n\ntype AppProps = {};\n\nexport type Score = {\n  id: number,\n  score: number,\n  delta: number,\n  name: string,\n  wins: number,\n  scores: number,\n  pluralText: string,\n  opponentName?: string,\n  opponentId?: number,\n  companyId?: number,\n  questionText?: string\n  questionId?: number\n};\n\nexport type Question = {\n  id: number,\n  text: string,\n  pluralText: string,\n  scores: Score[],\n  score?: number\n};\n\nexport type Company = {\n  id: number,\n  name: string,\n  questions: Question[],\n  scores: Score[],\n};\n\ntype AppState = {\n  hash: string,\n  questions: Question[],\n  companies: Company[]\n};\n\nexport type UpdateQuestionsState = {\n  questions: Question[]\n}\n\nexport type UpdateCompaniesState = {\n  companies: Company[]\n}\n\nclass App extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      hash: document.location.hash,\n      questions: [],\n      companies: []\n    };\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('hashchange', (): void => {\n      this.setState({\n        hash: document.location.hash\n      });\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header/>\n        <div className=\"App\">\n          {this.defineContent()}\n        </div>\n        <Footer hash={this.state.hash} />\n      </Fragment>\n    );\n  }\n\n  defineContent() {\n    const {hash, questions, companies} = this.state;\n\n    if (hash.includes('#tulokset')) {\n      return <QuestionsPanel hash={hash} questions={questions} updateState={(state: UpdateQuestionsState) => this.setState(state)}/>;\n    } else if (hash.includes('#yritykset')) {\n      return <CompaniesPanel hash={hash} companies={companies} updateState={(state: UpdateCompaniesState) => this.setState(state)} />;\n    } else if (hash === '#faq') {\n      return <FaqPanel/>;\n    }\n\n    return <HomePanel/>;\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}